
#include "stdafx.h"
#include "VirtualComm.h"



//read module info
BYTE Router_info_GY_send[] = {0x68, 0x0F, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x02, 0x01, 0x47, 0x16};
BYTE Router_info_GY_rec[] = {0x68, 0x3A, 0x00, 0x83, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x02, 0x01, 0xB2, 0x20, 0x00, 0x02, 0x00, 0x00, 0x5A, 0x0F, 0x00, 0xF1, 0x01, 0x80, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF8, 0x07, 0x01, 0x00, 0x01, 0x05, 0x13, 0x01, 0x05, 0x13, 0x4A, 0x51, 0x33, 0x30, 0x18, 0x04, 0x17, 0x02, 0x00, 0x00, 0x00, 0x80, 0x01, 0x64, 0x16};
//AFN12-F3: Router resume.
BYTE Router_resume_GY_send[] = {0x68, 0x0F, 0x00, 0x41, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x04, 0x00, 0x58, 0x16};
BYTE Router_resume_GY_rec[] = {0x68, 0x15, 0x00, 0x83, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xC0, 0x16};
//AFN12-F2: Router_pause.
BYTE Router_pause_GY_send[] = {0x68, 0x0F, 0x00, 0x41, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x02, 0x00, 0x56, 0x16};
BYTE Router_pause_GY_rec[] =  {0x68, 0x15, 0x00, 0x83, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xC0, 0x16};
//AFN05-F1: Set router addr.
BYTE SetRouter_addr_GY_send[] = {0x68, 0x15, 0x00, 0x41, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x47, 0x16};
BYTE SetRouter_addr_GY_rec[] = {0x68, 0x15, 0x00, 0x83, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xC0, 0x16};

//AFN01-F2: parameter reset.
BYTE Router_parameter_reset_GY_send[] = {0x68, 0x0F, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x44, 0x16};
BYTE Router_parameter_reset_GY_rec[] = {0x68, 0x15, 0x00, 0x83, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xC0, 0x16};
//AFN12-F1: Router restart.
BYTE Router_reset_GY_send[] = {0x68, 0x0F, 0x00, 0x41, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x01, 0x00, 0x55, 0x16};
BYTE Router_reset_GY_rec[] = {0x68, 0x15, 0x00, 0x83, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xC0, 0x16, 0x68, 0x0F, 0x00, 0xC3, 0x00, 0x00, 0x40, 0x00, 0x00, 0x03, 0x14, 0x02, 0x00, 0x1C, 0x16};





struct module_frame_s{
	BYTE *pSend;
	int  iSendLen;
	BYTE *pRec;
	int  iRecLen;
};

struct module_frame_s module_frame_table[] = {
	{Router_info_GY_send, sizeof(Router_info_GY_send), Router_info_GY_rec, sizeof(Router_info_GY_rec)},
	{Router_resume_GY_send, sizeof(Router_resume_GY_send), Router_resume_GY_rec, sizeof(Router_resume_GY_rec)},
	{Router_pause_GY_send, sizeof(Router_pause_GY_send), Router_pause_GY_rec, sizeof(Router_pause_GY_rec)},
	{SetRouter_addr_GY_send, sizeof(SetRouter_addr_GY_send), SetRouter_addr_GY_rec, sizeof(SetRouter_addr_GY_rec)},
	{Router_parameter_reset_GY_send, sizeof(Router_parameter_reset_GY_send), Router_parameter_reset_GY_rec, sizeof(Router_parameter_reset_GY_rec)},
	{Router_reset_GY_send, sizeof(Router_reset_GY_send), Router_reset_GY_rec, sizeof(Router_reset_GY_rec)},
};

CVirtualComm::CVirtualComm()
{
	m_OpenFlag = false;
	m_iAutoLen = 0;
}

CVirtualComm::~CVirtualComm()
{

}


BOOL CVirtualComm::IsOpen()
{
	return m_OpenFlag;
}

BOOL CVirtualComm::Open(LPCTSTR szPort, DWORD dwBaudRate, BYTE bByteSize,
			         BYTE bStopBits, BYTE bParity)
{
	m_strPort = szPort;
	m_wPort = 0; 
	m_dwBaudRate = dwBaudRate;
	m_bByteSize = bByteSize;
	m_bStopBits = bStopBits;
	m_bParity = bParity;
	m_OpenFlag = true;
	return true;
}

BOOL CVirtualComm::Open(int szPort, DWORD dwBaudRate, BYTE bByteSize,
			         BYTE bStopBits, BYTE bParity)
{
	m_wPort = szPort; 
	m_dwBaudRate = dwBaudRate;
	m_bByteSize = bByteSize;
	m_bStopBits = bStopBits;
	m_bParity = bParity;
	m_OpenFlag = true;
	return true;
}

int CVirtualComm::Write(LPCVOID lpBuf, DWORD dwLength)
{
	memcpy(m_sendBuf, lpBuf, dwLength);
	return dwLength;
}

int CVirtualComm::Read(LPVOID buf, DWORD dwLength)
{
	int iLen = 0;
	
	for (int i=0; i<sizeof(module_frame_table)/sizeof(module_frame_table[0]); i++)
	{
		if (memcmp(module_frame_table[i].pSend, m_sendBuf, module_frame_table[i].iSendLen) == 0)
		{
			memcpy(m_RecBuf, module_frame_table[i].pRec , module_frame_table[i].iRecLen);
			iLen = module_frame_table[i].iRecLen;
			break;
		}
	}

	if (iLen != 0)
		memcpy(buf, m_RecBuf, iLen);
	else if(m_iAutoLen != 0)
	{
		memcpy(buf, m_autoBuf, m_iAutoLen);
		iLen = m_iAutoLen;
	}

	return iLen;
}

int CVirtualComm::SetAutoRecBuf(LPCVOID lpBuf, DWORD dwLength)
 {
		memcpy(m_autoBuf, lpBuf, dwLength);
		m_iAutoLen = dwLength;
		return 0;
 }

int CVirtualComm::ClearAutoRecBuf(void)
 {
		memset(m_autoBuf, 0, sizeof(m_autoBuf));
		m_iAutoLen = 0;
		return 0;
 }
